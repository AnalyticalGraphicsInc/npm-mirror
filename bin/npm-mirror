#!/usr/bin/env node
var Package = require('../lib/package'),
    SyncManager = require('../lib/syncmanager'),
    check = require('validator').check,
    debug = require('debug')('npm-mirror'),
    fs = require('graceful-fs'),
    path = require('path'),
    program = require('commander');


/**
 * Find and parse manifest file.
 *
 * @param {string} manifestFile path to node module manifest file.
 * @return {Object} JSON-parsed module manifest.
 */
function parseManifest(manifestFile) {
  manifestFile = path.resolve(__dirname, '..', manifestFile);
  if (!fs.existsSync(manifestFile)) {
    throw new Error('Could not find manifest at ' + manifestFile);
  }

  return require(manifestFile);
}

/**
 * Make a packages directory if there isn't one already.
 *
 * @param {string} root path for mirrored packages.
 */
function resolveRoot(root) {
  var root = path.resolve(__dirname, '..', root);
  if (!fs.existsSync(root)) {
    fs.mkdirSync(root);
  }

  return root;
}

function main() {
  program
    .version('0.2.2')
    .usage([
      '--master', '<host>',
      '--manifests', '<file_1,file_2,...file_n>',
      '--hostname', '<url>',
      '--root', '<path>'
    ].join(' '))
    .option('--master [url]', 'NPM registry to mirror packages from')
    .option('--manifests [comma separated files]', 'Node module manifest files')
    .option('--hostname [hostname]', 'Hostname for npm mirror')
    .option('--root [path]', 'Path to write downloaded packages')
    .parse(process.argv);

  if (!(program.master &&
        program.manifests &&
        program.hostname &&
        program.root)) {
    program.help();
  }

  // hostname
  var hostname = program.hostname;
  check(hostname).isUrl();

  // manifests
  var dependencies = program.manifests.split(',')
    .map(function(manifestFile) {
      return parseManifest(manifestFile);
    })
    .map(function(manifest) {
      return Package.dependencies(manifest);
    });
  var packageToVersions = Package.mergeDependencies(dependencies);

  // master
  var master = program.master;
  check(master).isUrl();

  // root
  var root = resolveRoot(program.root);

  var syncManager = new SyncManager(master, packageToVersions, hostname, root);
  debug('sync from ' + master);
  debug(JSON.stringify(packageToVersions));
  syncManager.sync(function(e) {
    if (e) {
      throw e;
    }

    debug('done');
  });
}

if (require.main === module) {
  main();
}
